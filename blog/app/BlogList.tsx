import type { GetStaticProps, InferGetStaticPropsType, NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useRouter } from 'next/router'
import { BLOG } from './[id]'

const fs = require('fs');
const fm = require('front-matter');

const Home: NextPage = ({ blogList }: InferGetStaticPropsType<typeof getStaticProps>) => {
  const router = useRouter();

  return (
    <div className={styles.container}>
      <Head>
        <title>Blog</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <main className={styles.main}>
        <h1 style={{ marginBottom: '100px' }}>블로그 리스트</h1>
        <table>
          <tr style={{ padding: '5px' }}>
            <th>카테고리</th>
            <th>제목</th>
            <th>작성일자</th>
            <th>설명</th>
            <th>태그</th>
          </tr>
          {
            blogList.map((blog: BLOG) => (
              <tr key={blog.id} onClick={() => router.push(`/${blog.id}`)} style={{ padding: '5px' }}>
                <td>{blog.categories.map((category, idx) => category.concat((idx + 1) === blog.categories.length ? '' : ', '))}</td>
                <td>{blog.title}</td>
                <td>{blog.date}</td>
                <td>{blog.description}</td>
                <td>{blog.tags.map((tag, idx) => '#'.concat(tag).concat((idx + 1) === blog.tags.length ? '' : ' '))}</td>
              </tr>
            ))
          }
        </table>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export const getStaticProps: GetStaticProps = async () => {
  const dir = process.cwd().concat('/__posts'); // 마크다운 블로그 데이터가 존재하는 디렉토리 참조

  const files: string[] = await fs.readdirSync(dir); // files객체에 마크다운 블로그 데이터 세팅

  const blogList = files.map((fileName: string) => {
    const id = fileName.replace(/\.md$/, ''); // 파일이름명 세팅

    const file = fs.readFileSync(process.cwd().concat(`/__posts/${id}.md`), 'utf-8'); // 해당파일 파일객체 선언

    const contents = fm(file).attributes; // front-matter 라이브러리로 마크다운 메타데이터 파싱

    return {
      id,
      ...contents,
    }
  });

  return {
    props: {
      blogList,
    },
  };
};

export default Home
